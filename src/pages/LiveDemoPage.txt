import { useState } from "react";

const LiveDemoPage = () => {
	const [file, setFile] = useState(null);
	const [data, setData] = useState(null);
	const [result, setResult] = useState(null);
	const [loading, setLoading] = useState(false);
	const [error, setError] = useState<string|null>(null);

	const handleFileChange = (e) => {
	  const selectedFile = e.target.files[0];
	  if (selectedFile && (selectedFile.type === 'text/csv' || selectedFile.type === 'text/plain') && selectedFile.size <= 10 * 1024 * 1024) {
		setFile(selectedFile);
		setError(null);
		const reader = new FileReader();
		reader.onload = (event) => {
		  const csvData = Papa.parse(event.target.result, { header: true, skipEmptyLines: true });
		  setData(csvData.data.map(row => ({ time: parseFloat(row.time), voltage: parseFloat(row.voltage) })));
		};
		reader.readAsText(selectedFile);
	  } else {
		setError('Please upload a valid .csv or .txt file (max 10MB).');
	  }
	};

	const handleUpload = async () => {
	  if (!file) {
		setError('Please select a file.');
		return;
	  }
	  setLoading(true);
	  setError(null);
	  try {
		const response = await classifyECG(file);
		setResult(response);
	  } catch {
		setError('Failed to classify ECG signal.');
	  } finally {
		setLoading(false);
	  }
	};

	return (
	  <div className="container mx-auto p-6">
		<h1 className="text-3xl font-bold mb-6">Live Demo</h1>
		<div className="mb-6">
		  <input
			type="file"
			accept=".csv,.txt"
			onChange={handleFileChange}
			className="mb-4 p-2 border rounded"
		  />
		  <button
			onClick={handleUpload}
			disabled={loading}
			className={`bg-blue-600 text-white p-2 rounded ${loading ? 'opacity-50 cursor-not-allowed' : 'hover:bg-blue-700'}`}
		  >
			{loading ? 'Processing...' : 'Classify'}
		  </button>
		</div>
		{error && <p className="text-red-500 mb-4">{error}</p>}
		{data && (
		  <Plot
			data={[{ x: data.map(d => d.time), y: data.map(d => d.voltage), type: 'scatter', mode: 'lines', marker: { color: 'blue' } }]}
			layout={{ width: 800, height: 400, title: 'ECG Signal' }}
			className="mb-6"
		  />
		)}
		{result && (
		  <div className="mt-6">
			<h2 className="text-2xl font-semibold mb-4">Classification Result</h2>
			<p className="text-lg">Class: {result.class} {result.confidence && `(${result.confidence}%)`}</p>
		  </div>
		)}
		<div className="mt-6">
		  <h2 className="text-2xl font-semibold mb-4">Sample ECG Files</h2>
		  <p><a href="https://example.com/normal.csv" className="text-blue-600">Normal ECG Sample</a></p>
		  <p><a href="https://example.com/pvc.csv" className="text-blue-600">PVC ECG Sample</a></p>
		  <p className="text-sm text-gray-600">Note: Replace links with actual sample file URLs hosted by your backend.</p>
		</div>
	  </div>
	);
};

export default LiveDemoPage;